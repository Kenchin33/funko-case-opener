const express = require('express');
const Case = require('../models/Case');
const User = require('../models/User');
const router = express.Router();

const { authMiddleware } = require('./auth'); // —ñ–º–ø–æ—Ä—Ç, —è–∫ –æ–±'—î–∫—Ç

// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∫–µ–π—Å–∏
router.get('/', async (req, res) => {
  try {
    const cases = await Case.find().populate('figures');
    res.json(cases);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–µ–π—Å –∑–∞ id –∑ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è–º —Ñ—ñ–≥—É—Ä–æ–∫
router.get('/:id', async (req, res) => {
  try {
    const caseItem = await Case.findById(req.params.id).populate('figures');
    if (!caseItem) return res.status(404).json({ message: '–ö–µ–π—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });

    if (!caseItem.rarityChances) {
      caseItem.rarityChances = {
        Common: 60,
        Exclusive: 20,
        Epic: 10,
        Legendary: 8,
        Grail: 2,
      };
    }

    res.json(caseItem);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∫–µ–π—Å
router.post('/', async (req, res) => {
  try {
    console.log('req.body:', req.body);
    const { name, price, figures, category } = req.body;
    const newCase = new Case({ name, price, figures, category });
    await newCase.save();
    res.status(201).json(newCase);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// –í—ñ–¥–∫—Ä–∏—Ç–∏ –∫–µ–π—Å (–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é, –∑–Ω—ñ–º–∞–Ω–Ω—è–º –∫–æ—à—Ç—ñ–≤ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º –±–∞–ª–∞–Ω—Å—É)
router.post('/:id/open', authMiddleware, async (req, res) => {
  console.log('üéØ –í—ñ–¥–∫—Ä–∏—Ç–æ –∫–µ–π—Å', req.params.id);
  try {
    const caseItem = await Case.findById(req.params.id).populate('figures');
    if (!caseItem) return res.status(404).json({ message: '–ö–µ–π—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });

    const user = await User.findById(req.user.userId);
    if (!user) return res.status(404).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });

    if (user.balance < caseItem.price) {
      return res.status(400).json({ message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∫–µ–π—Å—É' });
    }

    // –ó–Ω—ñ–º–∞—î–º–æ –≥—Ä–æ—à—ñ
    user.balance -= caseItem.price;
    await user.save();

    const figures = caseItem.figures;
    if (figures.length === 0) {
      return res.status(400).json({ message: '–£ –∫–µ–π—Å—ñ –Ω–µ–º–∞—î —Ñ—ñ–≥—É—Ä–æ–∫' });
    }

    // –§–æ—Ä–º—É—î–º–æ —à–∞–Ω—Å –¥–ª—è –∫–æ–∂–Ω–æ—ó —Ä—ñ–¥–∫–æ—Å—Ç—ñ, —É–≤–∞–∂–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–ª—é—á—ñ
    const chancesFromCase = caseItem.rarityChances || {};
    const defaultChances = { Common: 60, Exclusive: 20, Epic: 10, Legendary: 8, Grail: 2 };

    // –°—Ç–≤–æ—Ä—é—î–º–æ –º–Ω–æ–∂–∏–Ω—É —Ä—ñ–¥–∫–æ—Å—Ç–µ–π —ñ–∑ —Ñ—ñ–≥—É—Ä–æ–∫, –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
    const presentRarities = new Set(figures.map(f => f.rarity?.trim()));

    // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –æ–±'—î–∫—Ç —à–∞–Ω—Å—ñ–≤ –¥–ª—è —Ü–∏—Ö —Ä—ñ–¥–∫–æ—Å—Ç–µ–π
    const chances = {};
    for (const rarity of presentRarities) {
      if (chancesFromCase.hasOwnProperty(rarity)) {
        chances[rarity] = chancesFromCase[rarity];
      } else if (defaultChances.hasOwnProperty(rarity)) {
        chances[rarity] = defaultChances[rarity];
      } else {
        chances[rarity] = 0;
      }
    }

    // –õ–æ–≥ —à–∞–Ω—Å—ñ–≤, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ –∑—á–∏—Ç—É—î—Ç—å—Å—è
    console.log('‚ö° –®–∞–Ω—Å–∏ –∑ –∫–µ–π—Å–∞:', chances);

    const weightedPool = [];

    figures.forEach(fig => {
      const rarity = fig.rarity?.trim();
      const weight = chances[rarity] ?? 0;
      console.log(`üîç –§—ñ–≥—É—Ä–∫–∞: ${fig.name}, –†—ñ–¥–∫—ñ—Å—Ç—å: ${rarity}, –®–∞–Ω—Å: ${weight}`);

      if (weight > 0) {
        for (let i = 0; i < weight; i++) {
          weightedPool.push(fig);
        }
      }
    });

    if (weightedPool.length === 0) {
      return res.status(400).json({ message: '–ù–µ–º–∞—î —Ñ—ñ–≥—É—Ä–æ–∫ –∑ –≤–∞–ª—ñ–¥–Ω–∏–º–∏ —à–∞–Ω—Å–∞–º–∏' });
    }

    // –õ–æ–≥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ñ—ñ–≥—É—Ä–æ–∫ —É –ø—É–ª—ñ (–∫–æ—Ä–∏—Å–Ω–æ –¥–ª—è –¥–µ–±–∞–≥—É)
    const rarityCount = weightedPool.reduce((acc, fig) => {
      const r = fig.rarity?.trim() || 'Unknown';
      acc[r] = (acc[r] || 0) + 1;
      return acc;
    }, {});
    console.log('üì¶ –†—ñ–¥–∫–æ—Å—Ç—ñ —É —Ñ—ñ–Ω–∞–ª—å–Ω–æ–º—É –ø—É–ª—ñ:', rarityCount);

    // –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É —Ñ—ñ–≥—É—Ä–∫—É
    const randomIndex = Math.floor(Math.random() * weightedPool.length);
    const selectedFigure = weightedPool[randomIndex];

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    res.json({
      ...selectedFigure.toObject(),
      newBalance: user.balance,
    });

  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∫–µ–π—Å—É:', err);
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ –∫–µ–π—Å—É' });
  }
});


// –í–∏–¥–∞–ª–∏—Ç–∏ –∫–µ–π—Å
router.delete('/:id', async (req, res) => {
  try {
    const deletedCase = await Case.findByIdAndDelete(req.params.id);

    if (!deletedCase) {
      return res.status(404).json({ message: '–ö–µ–π—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    res.json({ message: '–ö–µ–π—Å —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ', deletedCase });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// –ß–∞—Å—Ç–∫–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ–π—Å–∞
router.patch('/:id', async (req, res) => {
  try {
    const updates = req.body;
    const updatedCase = await Case.findByIdAndUpdate(req.params.id, updates, { new: true });

    if (!updatedCase) {
      return res.status(404).json({ message: '–ö–µ–π—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    res.json(updatedCase);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// –î–æ–¥–∞—Ç–∏ —Ñ—ñ–≥—É—Ä–∫—É –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ "–∑–∞–ª–∏—à–∏—Ç–∏")
router.post('/inventory/add', authMiddleware, async (req, res) => {
  try {
    const { figureId, caseId, caseName, price } = req.body;
    const user = await User.findById(req.user.userId);
    if (!user) return res.status(404).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });

    user.inventory.push({
      figure: figureId,
      caseId,
      caseName,
      price,
      date: new Date(),
    });

    await user.save();

    res.json({ message: '–§—ñ–≥—É—Ä–∫–∞ –¥–æ–¥–∞–Ω–∞ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä', inventory: user.inventory });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

module.exports = router;