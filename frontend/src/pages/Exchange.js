import React, { useEffect, useState, useRef } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { FaUserCircle } from 'react-icons/fa';
import './style.css';

const EXCLUDED_ID = "686f9c79b62dd7c2154d21e9";
const ITEMS_PER_PAGE = 18;

const Exchange = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [balance, setBalance] = useState(null);
  const [inventory, setInventory] = useState([]);
  const [allFigures, setAllFigures] = useState([]);
  const [sortOrderLeft, setSortOrderLeft] = useState(null);
  const [sortOrderRight, setSortOrderRight] = useState(null);
  const [errorMsg, setErrorMsg] = useState('');
  const [showError, setShowError] = useState(false);
  const errorTimeoutRef = useRef(null);

  const [selectedInventoryIds, setSelectedInventoryIds] = useState(new Set());
  const [selectedFiguresRight, setSelectedFiguresRight] = useState(new Set());

  const [inventoryPage, setInventoryPage] = useState(1);
  const [figuresPage, setFiguresPage] = useState(1);

  const navigate = useNavigate();
  const token = localStorage.getItem('token');

  const showErrorMessage = (msg) => {
    if (errorTimeoutRef.current) {
      clearTimeout(errorTimeoutRef.current);
    }
    setErrorMsg(msg);
    setShowError(true);
    errorTimeoutRef.current = setTimeout(() => setShowError(false), 2010);
  };

  // –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è userId –æ–¥–∏–Ω —Ä–∞–∑
  const parseJwt = (token) => {
    try {
      return JSON.parse(atob(token.split('.')[1]));
    } catch (e) {
      return null;
    }
  };

  const decodedToken = token ? parseJwt(token) : null;
  const userId = decodedToken?.userId;

  useEffect(() => {
    if (!token) return;

    fetch('https://funko-case-opener.onrender.com/api/auth/me', {
      headers: { Authorization: 'Bearer ' + token },
    })
      .then(res => {
        if (!res.ok) throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π');
        return res.json();
      })
      .then(data => {
        setIsLoggedIn(true);
        setBalance(data.balance ?? 0);
        setInventory(data.inventory ?? []);
      })
      .catch(() => {
        setIsLoggedIn(false);
        setBalance(null);
        setInventory([]);
        localStorage.removeItem('token');
      });
  }, [token]);

  useEffect(() => {
    fetch('https://funko-case-opener.onrender.com/api/figures')
      .then(res => res.json())
      .then(data => setAllFigures(data))
      .catch(err => console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ—ñ–≥—É—Ä–æ–∫:', err));
  }, []);

  useEffect(() => setInventoryPage(1), [sortOrderLeft]);
  useEffect(() => setFiguresPage(1), [sortOrderRight, selectedInventoryIds]);

  const getSortedInventory = () => {
    if (!sortOrderLeft) return inventory;
    return [...inventory].sort((a, b) =>
      sortOrderLeft === 'asc' ? a.figure.price - b.figure.price : b.figure.price - a.figure.price
    );
  };

  const selectedSumInventory = [...selectedInventoryIds].reduce((sum, id) => {
    const item = inventory.find(i => i._id === id);
    return sum + (item?.price ?? 0);
  }, 0);

  const getSortedAllFigures = () => {
    const filtered = allFigures.filter(fig =>
      fig._id !== EXCLUDED_ID &&
      selectedInventoryIds.size > 0 &&
      fig.price <= selectedSumInventory
    );
    if (!sortOrderRight) return filtered;
    return [...filtered].sort((a, b) =>
      sortOrderRight === 'asc' ? a.price - b.price : b.price - a.price
    );
  };

  const selectedSumRight = [...selectedFiguresRight].reduce((sum, id) => {
    const item = allFigures.find(f => f._id === id);
    return sum + (item?.price ?? 0);
  }, 0);

  const getPagedInventory = () => {
    const sorted = getSortedInventory();
    const start = (inventoryPage - 1) * ITEMS_PER_PAGE;
    return sorted.slice(start, start + ITEMS_PER_PAGE);
  };

  const getPagedAllFigures = () => {
    const sorted = getSortedAllFigures();
    const start = (figuresPage - 1) * ITEMS_PER_PAGE;
    return sorted.slice(start, start + ITEMS_PER_PAGE);
  };

  const toggleSelectInventory = (id) => {
    setSelectedInventoryIds(prev => {
      const updated = new Set(prev);
      if (updated.has(id)) updated.delete(id);
      else updated.add(id);
      return updated;
    });
  };

  const toggleSelectFigureRight = (id) => {
    const figure = allFigures.find(f => f._id === id);
    if (!figure) return;

    const isAlreadySelected = selectedFiguresRight.has(id);
    const newSum = isAlreadySelected
      ? selectedSumRight - figure.price
      : selectedSumRight + figure.price;

    if (newSum > selectedSumInventory) {
      showErrorMessage('–°—É–º–∞ —Ñ—ñ–≥—É—Ä–æ–∫ –ø–µ—Ä–µ–≤–∏—â—É—î –æ–±—Ä–∞–Ω—É –∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è.');
      return;
    }

    setSelectedFiguresRight(prev => {
      const updated = new Set(prev);
      if (updated.has(id)) updated.delete(id);
      else updated.add(id);
      return updated;
    });
  };

  // ** –û–Ω–æ–≤–ª–µ–Ω–∏–π handleExchange, —â–æ –Ω–∞–¥—Å–∏–ª–∞—î POST /api/exchange **
  const handleExchange = async () => {
    if (!userId || !token) {
      showErrorMessage('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π');
      return;
    }

    if (selectedInventoryIds.size === 0 || selectedFiguresRight.size === 0) {
      showErrorMessage('–û–±–µ—Ä—ñ—Ç—å —Ñ—ñ–≥—É—Ä–∫–∏ –¥–ª—è –æ–±–º—ñ–Ω—É –∑ –æ–±–æ—Ö —Å—Ç–æ—Ä—ñ–Ω');
      return;
    }

    // –§–æ—Ä–º—É—î–º–æ –º–∞—Å–∏–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è ‚Äî id —Ñ—ñ–≥—É—Ä–æ–∫ –∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è
    const removeIds = [...selectedInventoryIds];

    // –ù–æ–≤—ñ —Ñ—ñ–≥—É—Ä–∫–∏ ‚Äî –¥–∞–Ω—ñ –∑ allFigures –¥–ª—è –≤–∏–±—Ä–∞–Ω–∏—Ö –ø—Ä–∞–≤–æ—Ä—É—á
    const newFigures = [...selectedFiguresRight].map(id => {
      const fig = allFigures.find(f => f._id === id);
      return {
        _id: fig._id,
        price: fig.price,
        caseId: fig.caseId || null,
        caseName: fig.caseName || '–û–±–º—ñ–Ω',
      };
    });

    try {
      const res = await fetch('https://funko-case-opener.onrender.com/api/exchange', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: 'Bearer ' + token,
        },
        body: JSON.stringify({
          removeIds,
          newFigures,
        }),
      });

      if (!res.ok) throw new Error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±–º—ñ–Ω—ñ');

      const data = await res.json();

      // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –∑ –¥–∞–Ω–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞
      setInventory(data.inventory);
      // –°–∫–∏–¥–∞—î–º–æ –≤–∏–±—ñ—Ä
      setSelectedInventoryIds(new Set());
      setSelectedFiguresRight(new Set());
      setInventoryPage(1);
      setFiguresPage(1);
      showErrorMessage('–£—Å–ø—ñ—à–Ω–∏–π –æ–±–º—ñ–Ω üéâ');
    } catch (err) {
      console.error('handleExchange –ø–æ–º–∏–ª–∫–∞:', err);
      showErrorMessage('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –æ–±–º—ñ–Ω.');
    }
  };

  return (
    <div className="home-container">
      <header className="header">
        <button className="btn btn-outline back-button" onClick={() => navigate('/')}>‚Üê –ù–∞ –≥–æ–ª–æ–≤–Ω—É</button>
        <div className="logo" onClick={() => navigate('/')}>
          <h1 style={{ textAlign: 'center', color: 'white' }}>–û–±–º—ñ–Ω</h1>
        </div>
        <div className="user-menu">
          {isLoggedIn ? (
            <Link to="/profile" className="profile-icon" title="–ü—Ä–æ—Ñ—ñ–ª—å"
              style={{ display: 'flex', alignItems: 'flex-end', gap: '8px', color: 'white', fontWeight: '600' }}>
              <span className="balance-text">{balance !== null ? balance + ' UAH' : '...'}</span>
              <FaUserCircle size={36} />
            </Link>
          ) : (
            <>
              <Link to="/register" className="btn btn-outline">–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</Link>
              <Link to="/login" className="btn btn-primary">–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è</Link>
            </>
          )}
        </div>
      </header>

      <main>
        {selectedSumInventory > 0 && selectedSumInventory === selectedSumRight && (
          <div style={{ textAlign: 'center', margin: '20px 0' }}>
            <button className="btn btn-primary" onClick={handleExchange}>–û–±–º—ñ–Ω—è—Ç–∏ —Ñ—ñ–≥—É—Ä–∫–∏</button>
          </div>
        )}
        <div className="exchange-area">
          {/* –Ü–Ω–≤–µ–Ω—Ç–∞—Ä */}
          <div className="inventory-panel-exchange">
            <div className="inventory-header" style={{
              display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: 8, gap: 10
            }}>
              <h3 style={{ margin: 0 }}>–í–∞—à —ñ–Ω–≤–µ–Ω—Ç–∞—Ä</h3>
              <div style={{
                flex: '1 1 auto', textAlign: 'center', fontWeight: '600',
                color: 'orange', fontSize: '1.2rem', userSelect: 'none', minWidth: 140,
              }}>
                {selectedInventoryIds.size === 1 && `–¶—ñ–Ω–∞: ${selectedSumInventory}$`}
                {selectedInventoryIds.size > 1 && `–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${selectedSumInventory}$`}
              </div>
              <button className="btn btn-sort" onClick={() =>
                setSortOrderLeft(prev => prev === null ? 'asc' : prev === 'asc' ? 'desc' : null)
              }>
                {sortOrderLeft === 'asc' ? '–°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ ‚Üì' :
                  sortOrderLeft === 'desc' ? '–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è' : '–°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ ‚Üë'}
              </button>
            </div>

            <div className="inventory-grid">
              {inventory.length === 0 ? (
                <div className="figure-card placeholder-card">
                  <p style={{ textAlign: 'center', padding: '40px 10px' }}>–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Ñ—ñ–≥—É—Ä–æ–∫</p>
                </div>
              ) : (
                getPagedInventory().map(entry => {
                  const figure = entry.figure || {};
                  const isSelected = selectedInventoryIds.has(entry._id);
                  return (
                    <div key={entry._id} className={`figure-card ${isSelected ? 'selected' : ''}`}
                      onClick={() => toggleSelectInventory(entry._id)} style={{ cursor: 'pointer' }}>
                      <img src={figure.image} alt={figure.name} />
                      <p>{figure.name}</p>
                      <p className={`rarity ${figure.rarity}`}>{figure.rarity}</p>
                      <p>{entry.price}$</p>
                    </div>
                  );
                })
              )}
            </div>

            {/* –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é */}
            {Math.ceil(getSortedInventory().length / ITEMS_PER_PAGE) > 1 && (
              <div className="pagination-controls">
                <button className="btn" disabled={inventoryPage === 1}
                  onClick={() => setInventoryPage(p => p - 1)}>‚Üê –ù–∞–∑–∞–¥</button>
                <span style={{ color: 'white' }}>
                  –°—Ç–æ—Ä—ñ–Ω–∫–∞ {inventoryPage} –∑ {Math.ceil(getSortedInventory().length / ITEMS_PER_PAGE)}
                </span>
                <button className="btn" disabled={inventoryPage >= Math.ceil(getSortedInventory().length / ITEMS_PER_PAGE)}
                  onClick={() => setInventoryPage(p => p + 1)}>–î–∞–ª—ñ ‚Üí</button>
              </div>
            )}
          </div>

          {/* –í—Å—ñ —Ñ—ñ–≥—É—Ä–∫–∏ */}
          <div className="exchange-panel">
            <div className="inventory-header" style={{
              display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: 8, gap: 10
            }}>
              <h3 style={{ margin: 0 }}>–£—Å—ñ —Ñ—ñ–≥—É—Ä–∫–∏</h3>
              <div style={{
                flex: '1 1 auto', textAlign: 'center', fontWeight: '600',
                color: 'orange', fontSize: '1.2rem', userSelect: 'none', minWidth: 140,
              }}>
                {selectedFiguresRight.size === 1 && `–¶—ñ–Ω–∞: ${selectedSumRight}$`}
                {selectedFiguresRight.size > 1 && `–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${selectedSumRight}$`}
              </div>
              <button className="btn btn-sort" onClick={() =>
                setSortOrderRight(prev => prev === null ? 'asc' : prev === 'asc' ? 'desc' : null)
              }>
                {sortOrderRight === 'asc' ? '–°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ ‚Üì' :
                  sortOrderRight === 'desc' ? '–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è' : '–°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ ‚Üë'}
              </button>
            </div>

            <div className="inventory-grid">
              {selectedInventoryIds.size === 0 ? (
                <div className="figure-card placeholder-card">
                  <p style={{ textAlign: 'center', padding: '40px 10px' }}>–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å —Ñ—ñ–≥—É—Ä–∫—É(–∏) –∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è</p>
                </div>
              ) : getSortedAllFigures().length === 0 ? (
                <div className="figure-card placeholder-card">
                  <p style={{ textAlign: 'center', padding: '40px 10px' }}>–ù–µ–º–∞—î —Ñ—ñ–≥—É—Ä–æ–∫ –¥–µ—à–µ–≤—à–∏—Ö –∞–±–æ —Ä—ñ–≤–Ω–∏—Ö –∑–∞ —Å—É–º–æ—é</p>
                </div>
              ) : (
                getPagedAllFigures().map(figure => {
                  const isSelected = selectedFiguresRight.has(figure._id);
                  return (
                    <div key={figure._id} className={`figure-card ${isSelected ? 'selected' : ''}`}
                      onClick={() => toggleSelectFigureRight(figure._id)} style={{ cursor: 'pointer' }}>
                      <img src={figure.image} alt={figure.name} />
                      <p>{figure.name}</p>
                      <p className={`rarity ${figure.rarity}`}>{figure.rarity}</p>
                      <p>{figure.price}$</p>
                    </div>
                  );
                })
              )}
            </div>

            {/* –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è –ø—Ä–∞–≤–æ–≥–æ –±–ª–æ–∫—É */}
            {selectedInventoryIds.size > 0 && getSortedAllFigures().length > ITEMS_PER_PAGE && (
              <div className="pagination-controls">
                <button className="btn" disabled={figuresPage === 1}
                  onClick={() => setFiguresPage(p => p - 1)}>‚Üê –ù–∞–∑–∞–¥</button>
                <span style={{ color: 'white' }}>
                  –°—Ç–æ—Ä—ñ–Ω–∫–∞ {figuresPage} –∑ {Math.ceil(getSortedAllFigures().length / ITEMS_PER_PAGE)}
                </span>
                <button className="btn"
                  disabled={figuresPage >= Math.ceil(getSortedAllFigures().length / ITEMS_PER_PAGE)}
                  onClick={() => setFiguresPage(p => p + 1)}>–î–∞–ª—ñ ‚Üí</button>
              </div>
            )}
          </div>
        </div>
        {showError && (
          <div className="error-message-exchange" role="alert" aria-live="assertive">{errorMsg}</div>
        )}
      </main>
    </div>
  );
};

export default Exchange;